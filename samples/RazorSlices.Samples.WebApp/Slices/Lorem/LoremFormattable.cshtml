@inherits RazorSliceHttpResult<LoremParams>

@{
    var content = new LoremContent { ParagraphCount = Model.ParagraphCount };
}

<h1 class="mt-5">@PageTitle</h1>
@content

@functions {
    string PageTitle = "";

    protected override RazorSlice GetLayout()
    {
        PageTitle = $"Lorem Ipsum (Formattable: {Model.ParagraphCount} paragraphs)";

        var layoutModel = new LayoutModel
            {
                Title = PageTitle
            };
        return _LoremLayout.Create(layoutModel);
    }

    public struct LoremContent : ISpanFormattable
    {
        public int ParagraphCount { get; set; }

        public bool TryFormat(Span<char> destination, out int charsWritten, ReadOnlySpan<char> format, IFormatProvider? provider)
        {
            charsWritten = 0;
            var dest = destination;
            for (int i = 0; i < ParagraphCount; i++)
            {
                if (!dest.TryWrite($"{PageContent.Paragraph}", out var written))
                {
                    charsWritten = 0;
                    return false;
                }

                charsWritten += written;
                dest = dest[written..];
            }
            return true;
        }

        public string ToString(string? format, IFormatProvider? formatProvider)
        {
            throw new NotSupportedException("Call TryFormat instead.");
        }
    }
}

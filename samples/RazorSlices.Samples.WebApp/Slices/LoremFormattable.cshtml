@inherits RazorSliceHttpResult<LoremParams>
@{
    var title = $"Lorem Ipsum (Formattable: {Model.ParagraphCount} paragraphs)";
    var content = new LoremContent { ParagraphCount = Model.ParagraphCount };
}
<!DOCTYPE html>
<html lang="en" class="h-100">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>@title</title>
    <base href="/" />
    <link href="lib/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link href="css/site.css" rel="stylesheet" />
    <link rel="icon" href="/docs/5.3/assets/img/favicons/favicon.ico">
    <link href="css/site.css" rel="stylesheet" />
</head>
<body class="d-flex flex-column h-100">
    <main class="flex-shrink-0">
        <div class="container">
            <h1 class="mt-5">@title</h1>
            @content
        </div>
    </main>

    @await RenderPartialAsync("/Slices/_Footer.cshtml")
</body>
</html>

@functions {
    public struct LoremContent : ISpanFormattable
    {
        public int ParagraphCount { get; set; }

        public bool TryFormat(Span<char> destination, out int charsWritten, ReadOnlySpan<char> format, IFormatProvider? provider)
        {
            charsWritten = 0;
            var dest = destination;
            for (int i = 0; i < ParagraphCount; i++)
            {
                if (!dest.TryWrite($"{PageContent.Paragraph}", out var written))
                {
                    charsWritten = 0;
                    return false;
                }

                charsWritten += written;
                dest = dest[written..];
            }
            return true;
        }

        public string ToString(string? format, IFormatProvider? formatProvider)
        {
            throw new NotSupportedException("Call TryFormat instead.");
        }
    }
}

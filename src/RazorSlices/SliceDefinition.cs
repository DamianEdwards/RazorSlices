using System.Diagnostics.CodeAnalysis;
using System.Reflection;

namespace RazorSlices;

/// <summary>
/// Defines a Razor Slice that can be created via <see cref="RazorSliceFactory"/>.
/// </summary>
/// <remarks>
/// This type is used by the types generated by the Razor Slices source generator. You should not need to interact with this type directly in your project.
/// </remarks>
public class SliceDefinition
{
    /// <summary>
    /// Creates a new instance of <see cref="SliceDefinition"/>.
    /// </summary>
    /// <param name="sliceType">The type of the slice.</param>
    /// <exception cref="ArgumentException">Thrown if the specified slice type cannot be loaded.</exception>
    public SliceDefinition(
        [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.All)]
        Type sliceType)
    {
        ArgumentNullException.ThrowIfNull(sliceType);

        SliceType = sliceType;
        HasModel = RazorSliceFactory.IsModelSlice(SliceType);
        ModelProperty = SliceType.GetProperty("Model");
        ModelType = ModelProperty?.PropertyType;
        InjectableProperties = RazorSliceFactory.GetInjectableProperties(SliceType);
        Factory = RazorSliceFactory.GetSliceFactory(this);
    }

    /// <summary>
    /// Gets the type of the slice.
    /// </summary>
    [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.All)]
    public Type SliceType { get; }

    /// <summary>
    /// Gets whether this slice has a model.
    /// </summary>
    public bool HasModel { get; }

    /// <summary>
    /// Gets the information about the model property for the slice if it has a model.
    /// </summary>
    public PropertyInfo? ModelProperty { get; }

    /// <summary>
    /// Gets the model type for the slice if it has a model.
    /// </summary>
    public Type? ModelType { get; }

    /// <summary>
    /// Gets details of the injectable properties for the slice.
    /// </summary>
    public (bool Any, PropertyInfo[] Nullable, PropertyInfo[] NonNullable) InjectableProperties { get; }

    /// <summary>
    /// Gets the factory delegate for creating instances of the slice.
    /// </summary>
    public Delegate Factory { get; }

    /// <summary>
    /// Creates a new instance of the slice this definition represents.
    /// </summary>
    /// <returns>The slice instance.</returns>
    /// <exception cref="InvalidOperationException">Thrown if the slice requires a model.</exception>
    public RazorSlice CreateSlice() => HasModel
        ? throw new InvalidOperationException($"Slice {SliceType.Name} requires a model of type {ModelType?.Name}. Call Create<TModel>(TModel model) instead.")
        : ((Func<RazorSlice>)Factory)();

    /// <summary>
    /// Creates a new instance of the slice this definition represents with the specified model.
    /// </summary>
    /// <typeparam name="TModel">The type of the slice model.</typeparam>
    /// <param name="model">The model for the slice.</param>
    /// <returns>The slice instance.</returns>
    /// <exception cref="InvalidOperationException">Thrown if the slice does not require a model or the model instance passed is not assignable to the model type the slice requires.</exception>
    public RazorSlice<TModel> CreateSlice<TModel>(TModel model) => !HasModel || !typeof(TModel).IsAssignableTo(ModelType)
        ? throw new InvalidOperationException($"""
            Cannot use model of type {typeof(TModel).Name} with slice {SliceType.Name}.
            {(HasModel ? $"Ensure the model is assignable to {ModelType!.Name}" : "It is not a strongly-typed slice.")}
            """)
        : (RazorSlice<TModel>)((Func<object, RazorSlice>)Factory)(model!);
}
